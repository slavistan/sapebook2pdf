#!/usr/bin/env zsh

usage() {
  cat <<EOF
Generate a PDF from an SAP Learning Hub ebook. Their ebook reader is insulting.

Usage scheme:
 - Login with your browser and open the ebook's index.html and generate the
   cookies.txt
 - Locate the path to the ebook page's SVG files and use dlsvg() to download
   all SVGs. Use your browser's page inspection tools.
 - List the SVG's required fonts using lsfonts() and install any missing
   fonts. Some of the fonts may be downloaded from the ebook's server. Have a
   look into the css (e.g. css/webFonts.css lists paths to webfonts). Downloaded
   webfonts (.woff2 format) may be converted to .ttf via 'woff2_decompress'.
   Missing fonts won't be included in the generated PDF causing a default font
   to be used, which may mess up the document layout. No bueno.
 - Generate PDFs from SVGs using genpdf().

WIP; Arguments not parameterized; Many Todos
EOF
}

# Exported cookies.txt generated by Firefox.
cookies="./cookies.txt"

# Where to stuff all svgs. Directory will be created silently.
tmpdir="/tmp/sapebook"

# Final PDF output path. Directory will be created silently.
pdfout="./ebook.pdf"

# TODO: Retrieve number of pages dynamically from 'index.html'
# Pages to extract. One page number per line.
pages="$(seq 1 120)"

# Base url with respect to which all resource paths are interpreted. Directory
# of 'index.html'.
baseurl="https://saplearninghub.plateau.com/icontent_e/CUSTOM_eu/sap/self-managed/ebook/BC100_EN_Col18"

# Download all SVG files
dlsvg() {
  mkdir -p "$tmpdir"
  total="$(echo "$pages" | wc -l)"
  ii=1
  echo "$pages" | while read page; do
    printf "\033[2K\rDownloading SVGs ... $ii/$total"
    ii=$((ii + 1))
    reply="$(curl -Ls -b "$cookies" -c "$cookies" \
      -w "\n%{http_code}" \
      "$baseurl/xml/topic$page.svg")"
    retcode=$(echo "$reply" | tail -n 1)
    if [ ! "$retcode" -eq 200 ]; then
      errorat="$errorat $page"
    else
      echo "$reply" | head -n -1 > "$tmpdir/page$page.svg"
    fi
  done
  printf "\n"
  if [ ! -z "$errorat" ]; then
    echo "$errorat" | while read page; do
      echo "Error downloading page(s) '${errorat:s/ //}'" >&2
    done
    return 1
  fi
}

# List all fonts required inside the SVGs
lsfonts() {
  fonts="$(cat "$tmpdir/"*.svg | grep -o 'font-family="[^"]*"' |
    cut -d '=' -f 2- | sed -e 's/^"'"'"'\?//g' -e 's/'"'"'\?"$//g' |
    sort | uniq)"
  echo "$fonts" | while read f; do
    printf "$f "
    if fc-list :family | grep -q "$f"; then
      printf "[\033[32mavailable\033[0m]\n"
    else
      fontmissing=1
      printf "[\033[31mnot available\033[0m]\n"
    fi
  done
  return ${+fontmissing}
}

# Generate PDF
genpdf() {
  total="$(echo "$pages" | wc -l)"
  ii=1
  echo "$pages" | while read page; do
    printf "\033[2K\rGenerating PDF pages from SVG ... $ii/$total"
    ii=$((ii + 1))
    inf="$tmpdir/page$page.svg"
    outf="$tmpdir/page$page.pdf"
    if ! rsvg-convert -f pdf -o "$outf" "$inf" 2>/dev/null; then
      errorat="$errorat $page"
    fi
  done
  printf "\n"
  if [ ! -z "$errorat" ]; then
    echo "$errorat" | while read page; do
      echo "Error generating PDFs from SVG page(s) '${errorat:s/ //}'" >&2
    done
    return 1
  fi
  inpdfs="$(echo "$pages" | sed 's|.*|'"$tmpdir/"'page&.pdf|g')" # in order
  mkdir -p "${pdfout:A:h}"
  pdftk "${=inpdfs:s/\n/ }" cat output "$pdfout"
}

case "$1" in
-h|--help)
  usage
  ;;
@)
  shift
  "$@"
  ;;
*)
  set -e
  dlsvg
  lsfonts
  genpdf
  ;;
esac
