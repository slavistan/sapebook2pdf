#!/usr/bin/env zsh

usage() {
  cat <<EOF
Generate a PDF from an SAP Learning Hub ebook. Their ebook reader is insulting.

Usage:

  $ZSH_ARGZERO [OPTIONS] SETTING=VALUE...

    VALUEs must be provided for each of the following SETTINGs:

      --baseurl - Path URL to the directory containing the ebook's index.html
      --cookies - Path to local cookies.txt containing the login cookies
      --pages   - Range of pages as two numbers separated by a hyphen
      --pdfout  - Output path. Directory must exist.

    OPTIONS include:

      --nocheckfont - Don't check if all SVG fonts are availble on the system
      --nocleanup   - Don't remove temporary files after finishing

    Usage hints:

      To acquire a cookies.txt login to your account and navigate to the ebook.
      Use your browser to generate the cookies.txt for you (which may require
      using a plugin).

      The baseurl corresponds to the path containing the index.html. Given
      'https://sap.com/foo/self-managed/ebook/BC100_EN_Col18/index.html' the
      baseurl is 'https://sap.com/foo/self-managed/ebook/BC100_EN_Col18/'.

      The ebooks are stored online as individual pages in SVG format. These
      SVGs reference fonts which are required to be available on your system in
      order for them to end up in the generated PDF. The availability of the
      fonts is asserted during compilation with missing fonts having to be
      installed manually on your system. You may choose to skip any font checks
      via the option --nocheckfont which will lead to the usage of your
      system's fallback fonts and may or may not produce a goofy PDF.


Examples:

  $ZSH_ARGZERO \\
    --nocheckfont \\
    --baseurl="https://sap.com/foo/self-managed/ebook/BC100_EN_Col18" \\
    --pages=1-80 \\
    --cookies=./cookies.txt \\
    --pdfout=~/doc/ebook.pdf
EOF
}

cleanup() {
  rm -r "$tmpdir"
}

# Download all SVG files
dlsvg() {
  mkdir -p "$tmpdir"
  total="$(echo "$pages" | wc -l)"
  ii=1
  echo "$pages" | while read page; do
    printf "\033[2K\rDownloading SVGs ... $ii/$total"
    ii=$((ii + 1))
    reply="$(curl -Ls -b "$cookies" -c "$cookies" \
      -w "\n%{http_code}" \
      "$baseurl/xml/topic$page.svg")"
    retcode=$(echo "$reply" | tail -n 1)
    if [ ! "$retcode" -eq 200 ]; then
      errorat="$errorat $page"
    else
      echo "$reply" | head -n -1 > "$tmpdir/page$page.svg"
    fi
  done
    printf "\033[2K\rDownloading SVGs ... done.\n"
  if [ ! -z "$errorat" ]; then
    echo "$errorat" | while read page; do
      echo "Error downloading page(s) '${errorat:s/ //}'" >&2
    done
    return 1
  fi
}

# List all fonts required inside the SVGs
lsfonts() {
  printf "Required fonts:\n"
  fonts="$(cat "$tmpdir/"*.svg | grep -o 'font-family="[^"]*"' |
    cut -d '=' -f 2- | sed -e 's/^"'"'"'\?//g' -e 's/'"'"'\?"$//g' |
    sort | uniq)"
  availfonts="$(fc-list :family)"
  echo "$fonts" | while read f; do
    printf " - $f "
    if echo "$availfonts" | grep -q "$f"; then
      printf "[\033[32mavailable\033[0m]\n"
    else
      fontmissing=1
      printf "[\033[31mnot available\033[0m]\n"
    fi
  done
  return ${+fontmissing}
}

# Generate PDF
genpdf() {
  total="$(echo "$pages" | wc -l)"
  ii=1
  echo "$pages" | while read page; do
    printf "\033[2K\rGenerating single PDF pages from SVGs ... $ii/$total"
    ii=$((ii + 1))
    inf="$tmpdir/page$page.svg"
    outf="$tmpdir/page$page.pdf"
    if ! rsvg-convert -f pdf -o "$outf" "$inf" 2>/dev/null; then
      errorat="$errorat $page"
    fi
  done
    printf "\033[2K\rGenerating single PDF pages from SVGs ... done.\n"
  if [ ! -z "$errorat" ]; then
    echo "$errorat" | while read page; do
      echo "Error generating PDFs from SVG page(s) '${errorat:s/ //}'" >&2
    done
    return 1
  fi
  inpdfs="$(echo "$pages" | sed 's|.*|'"$tmpdir/"'page&.pdf|g')" # in order
  mkdir -p "${pdfout:A:h}"
  printf "Collating pages into single PDF '$pdfout' ... "
  if pdftk "${=inpdfs:s/\n/ }" cat output "$pdfout"; then
    printf "done.\n"
  else
    printf "error.\n"
    return 1
  fi
}

# Parse args and initialize globals
setup() {
  for arg in "$@"; do
    if echo "$arg" | grep -q '^--pdfout='; then
      pdfout="${arg:s/--pdfout=//}"
      pdfout="$(echo "$pdfout" | sed 's|^~|'"$HOME"'|')"
    elif echo "$arg" | grep -q '^--cookies='; then
      cookies="${arg:s/--cookies=//}"
      cookies="$(echo "$cookies" | sed 's|^~|'"$HOME"'|')"
    elif echo "$arg" | grep -q '^--baseurl='; then
      baseurl="${arg:s/--baseurl=//}"
    elif echo "$arg" | grep -q '^--pages='; then
      range="${arg:s/--pages=//}"
      if ! echo "$range" | grep -q '^[1-9]\+[0-9]*-[1-9]\+[0-9]*'; then
        echo "Invalid page range." >&2
        return 1
      fi
      n="$(echo "$range" | cut -d '-' -f1)"
      m="$(echo "$range" | cut -d '-' -f2)"
      if [ $n -gt $m ] || [ $m -le 0 ]; then
        echo "Invalid page range." >&2
        return 1
      fi
      pages="$(seq $n $m)"
    elif [ "$arg" = "--nocheckfont" ]; then
      nocheckfont=1
    elif [ "$arg" = "--nocleanup" ]; then
      nocleanup=1
    else
      echo "Unrecognized parameter '$arg'." >&2
      return 1
    fi
  done

  if [ ! -r "$cookies" ]; then
    echo "Cannot read cookies file '$cookies'."
    return 1
  fi
  if [ ! -d "${pdfout:h}" ]; then
    echo "Output directory '${pdfout:h}' does not exist."
    return 1
  fi
  if ! tmpdir="$(mktemp -d)"; then
    echo "Cannot create temporary directory."
    return 1
  fi
}

case "$1" in
-h|--help)
  usage
  ;;
@)
  shift
  "$@"
  ;;
*)
  set -e
  setup "$@"
  printf "Temporary files are saved to '$tmpdir'.\n"
  dlsvg
  if [ ! $nocheckfont ]; then
    lsfonts
  fi
  genpdf
  if [ ! $nocleanup ]; then
    cleanup
  fi
  ;;
esac

# TODO: Make plain shell script
#        - Remove zsh from requirements
# TODO: Automatically determine pages
#        - Remove page range parameter
# TODO: Verify connection asap
# TODO: Unfuck links (use javascript by default)
